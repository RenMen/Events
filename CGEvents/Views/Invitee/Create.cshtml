@model CGEvents.Models.Ams

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Ams</h4>
<hr />
<div class="table-responsive">
    @(Html.Kendo().Grid<CGEvents.Models.Ams>()
            .Name("Grid")
            .Columns(columns =>
            {
                columns.Bound(p => p.Fname).Filterable(false).Title("First Name");
                columns.Bound(p => p.Lname).Filterable(false).Title("Last Name");
                columns.Bound(p => p.EmailId).Filterable(false).Title("Email ID");
                columns.Bound(p => p.Position).Filterable(false).Title("Position");
                columns.Bound(p => p.Company).Filterable(false).Title("Company");
                columns.Bound(p => p.IndvDeadline).Filterable(false).Title("Deadline");
                columns.Bound(p => p.EventGroupId).Filterable(false).Title("EventGroupID");
                columns.Command(command => command.Destroy()).Width(150); // The "destroy" command removes data items.

            })
            .ToolBar(toolbar =>
            {
                toolbar.Create();// The "create" command adds new data items.
                toolbar.Save();// The "save" command saves the changed data items.
            })
            .Editable(editable => editable.Mode(GridEditMode.InCell))// Use in-cell editing mode.
            .Pageable()
            .Navigatable()
            .Sortable()
            .Scrollable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)// Enable batch updates.
                .PageSize(20)
                .ServerOperation(false)
                .Events(events => events.Error("error_handler"))
                .Model(model =>
                {
                    model.Id(id => id.Id); // Specify the property which is the unique identifier of the model.
                    model.Field(Ed => Ed.EventId).Editable(false); // Make the EventID property not editable.

                })
                .Create("Invitee_Create", "Invitee")// Action method invoked when the user saves a new data item.
                                                    //.Read("Invitee_Read", "Invitee")// Action method invoked when the grid needs data.
                .Update("Invitee_Update", "Invitee")// Action method invoked when the user saves an updated data item.
                .Destroy("Invitee_Destroy", "Invitee")// Action method invoked when the user removes a data item.
            )
    )
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>

